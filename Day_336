```cpp
#include <iostream>
#include <climits>
using namespace std;

#define V 5

int minDistance(int dist[], bool visited[]) {
    int min = INT_MAX, idx;
    for (int i = 0; i < V; i++)
        if (!visited[i] && dist[i] <= min) min = dist[i], idx = i;
    return idx;
}

void dijkstra(int graph[V][V], int src) {
    int dist[V]; bool visited[V] = {false};
    for (int i = 0; i < V; i++) dist[i] = INT_MAX;
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = true;
        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    cout << "Vertex \tDistance from Source\n";
    for (int i = 0; i < V; i++) cout << i << "\t" << dist[i] << "\n";
}

int main() {
    int graph[V][V] = { {0,10,0,30,100},
                        {10,0,50,0,0},
                        {0,50,0,20,10},
                        {30,0,20,0,60},
                        {100,0,10,60,0} };
    dijkstra(graph, 0);
}
```

âœ… **Changes made:**

* Removed unnecessary comments and whitespace.
* Combined some statements for brevity (like `min = ..., idx = ...`).
* Used inline initialization for `visited`.
* Kept all core logic intact so it works exactly the same.
