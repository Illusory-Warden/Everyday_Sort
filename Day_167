Twingate‚Äôs Zero Trust architecture is built on **four core components** that work together to ensure secure, authenticated access to private resources:

---

### 1. Controller üß†

* Acts as the central authority, managed by Twingate.
* Stores admin configurations, user and connector ACLs, orchestrates authentication and authorization‚Äîbut doesn‚Äôt handle actual data traffic.
* Delegates user authentication to your Identity Provider, then issues signed ACLs to both Clients and Connectors to enforce least-privilege access ([twingate.com][1], [twingate.com][2]).

---

### 2. Client

* Installed on end‚Äëuser devices (Windows, macOS, Linux, iOS, Android).
* Queries the Controller for a signed ACL post-authentication, inspects all network requests, and proxy-forwards only authorized connections.
* Creates encrypted, certificate-pinned TLS tunnels to Connectors, plus handles DNS resolution for protected resources ([twingate.com][1]).

---

### 3. Connector

* Deployed inside your private remote network (e.g., on-prem or cloud).
* Authenticates with the Controller, receives connector‚Äëspecific ACLs, and maintains outbound connections to one or more Relays.
* Validates TLS tunnels from Clients and relays traffic to the actual resource, including handling local DNS lookups ([twingate.com][1]).

---

### 4. Relay

* Serves as a lightweight TURN-like intermediary with *no data storage*.
* Connectors register themselves to Relay(s), sharing just an anonymized connector ID.
* Clients use the Relay to locate and tunnel to the correct Connector when direct peer-to-peer isn‚Äôt possible ([twingate.com][1]).

---

### üîÅ How They Work Together

1. **User logs in** via the Client ‚Üí Controller verifies with your IdP ‚Üí issues signed ACL.
2. **Client detects request** to a protected resource, checks ACL.
3. **Connector receives TLS tunnel** (direct or via Relay), verifies signature, and forwards traffic if ACLs match.
4. **Relay** only facilitates connectivity; it neither reads nor stores traffic.

---

üéØ This modular setup ensures **no single component** can independently authorize access, making Twingate a true Zero Trust solution ([twingate.com][1]).

[1]: https://www.twingate.com/docs/how-twingate-works?utm_source=chatgpt.com "How Twingate Works | Docs"
[2]: https://www.twingate.com/docs/architecture?utm_source=chatgpt.com "Architecture | Docs - Twingate"
